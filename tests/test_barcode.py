from unittest import TestCase

from bb_wrapper.barcode_utils import generate_barcode_b64image


class BarcodeTestCase(TestCase):
    def test_1(self):
        """
        Dado:
            - um número de código de barras
        Quando:
            - for chamado generate_barcode_b64image(barcode_number)
        Então:
            - o resultado deve ser ¯\_(ツ)_/¯
        """
        barcode_number = "00193846200000100000000003128557123123001317"

        result = generate_barcode_b64image(barcode_number)

        expected = b"iVBORw0KGgoAAAANSUhEUgAAA+oAAAEYCAIAAABEOZu+AAAUVElEQVR4nO3de5DVdf0/8Peyu6yY3AUFaWi4qIhKhTXa2IQSENogozY0ioTjiDUNk40x6GQE1H9NDdYfWnQRKSiCGcskxRigIUkisRxI7pSaXESuLrFc9vvHZ35nzm/PsnxYzh73tfN4/MV+zut8Pu/rOU92z6WqsbExAQAAEXT6oBsAAADkJb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBg1H3QD2lxVVVVKqbGx8Zw/Zv8u/bGgcK8mJ89Tc85zNmlYzvafsyUX0otmB6SFuzdbdr4NLq05r6G78BHO08IPatm0MMLndcWck1h6l9YtiRZa0nKn2m5Iz3aJCk9i5a9YgWVTxvXQwvHzKmu5wec8W54G57xEnvOEeNxr4VRtt3lLay7k2aftHkZK795+kkbpOVv3wNXkzBfS9zZaEs3eqyPx23cAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACEN8BwCAMMR3AAAIQ3wHAIAwxHcAAAhDfAcAgDDEdwAACKOqsbHxg24DAACQi9++AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvgMAQBjiOwAAhCG+AwBAGOI7AACEIb4DAEAY4jsAAIQhvtOhbNiw4XOf+1z37t27des2ZsyYdevWtaLm6NGjv/3tb++7777evXtXVVV98YtfLD3JsWPHZs6cOXTo0Lq6ul69et1+++3r168vLjhz5syLL754//33Dxs27KKLLurbt+/EiRNLr3XmzJmnn376xhtv7N27d69evT75yU/Onz//9OnTZ+vgvHnzqqqqqqqqtm/f3uSm+vr62bNnDx8+/OKLL+7bt++0adPefPPNwq0nTpxYsmTJhAkTBg0aVFdXd9lll33hC1/YuHFjG41hJWvyzFd7a3OHrMm55s85XznXap69U1NTU1XiqaeeOq+ayZMnlxZkHnvssfL2q5JjmPNaqVL7tFx9zzlfEFsjdBSvvPJKXV1d8fKura3985//fL41Dz30UHHBpEmTmlzo+PHjI0eObLKVamtrV61aVahp9hmuU6dOS5YsKT7V5MmTS8vuuuuuZju4b9++Hj16ZDXbtm0rvungwYMjRoxo4Tzz588vvVBtbe1zzz3XFmNYyZpzzlc7bHOHrMm55s85XznXap69U11dXVrz5JNPnlfNvffeW1qQ+cMf/lDeflVyDHNeq2L7tFx9zzlfEJr4Tsfx8Y9/PKU0efLkPXv27Nu374EHHkgpDR8+/MyZM+dVM2PGjLvvvnvBggVPP/10s08PTz75ZEqpf//+y5cvP3r06Ntvv/3444+nlK655prCedavXz927NjFixdv3br1+PHjO3fu/PKXv5xS6tOnz8mTJ7Oaf/7znyml6urq+fPnv/fee4cOHVq4cGFtbW1Kad26daUdfOCBB0aMGDFs2LBUEt/vv//+lNLll1++dOnSo0ePHjx4cOHChd/4xjcKBQsXLrzzzjuXLl26bdu2+vr6119/fezYsdldCu0p4xhWsuac89UO29wha/Ks+TzzlWet5tw71dXVI0aMKF0PxfLUlLryyiv79u1b9n5VcgxzXqti+7Rcfc85XxCa+E4H8eqrr6aUBgwYcOLEiezIyZMnBw0alFL6y1/+kr+m2HPPPdfs08Ndd92VUvr5z39efHD8+PEppb/97W8tNDK71ubNm7MfFy9enFK68847i2vuueeelNL8+fOb3HfDhg2dOnVauXLl8OHDm8T3PXv2VFdXV1dX//3vf2/h6k0cPnz4kksuSSlt3LgxO1KuMaxkTbGzzVd7a3NHrWlWkzVf7GzzVap0rebcO20U31evXp1Sevjhh5u99UL61aw2GsM816rkPs3Tntadp+X5goi89p0OYs2aNSmliRMndu7cOTtSU1OT5exVq1blr8njwIEDKaWrr766+GD22pW1a9e2cMeqqqqUUrdu3bIf+/fvn1Lq1On/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"

        self.assertEqual(result, expected)
